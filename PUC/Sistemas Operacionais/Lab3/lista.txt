5) Faça um programa que leia 2 números e 
imprima o resultado das 4 operações básicas 
sobre estes 2 números.
Verifique o que acontece se o 2º. número 
da entrada for 0 (zero)
Capture o sinal de erro de floating point 
(SIGFPE) e repita a experiência anterior

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

void arithmeticOperationError();

int main(void) {
    int number1, number2;
    printf("First number: ");
    scanf("%d", &number1);
    printf("Second number: ");
    scanf("%d", &number2);

    signal(SIGFPE, arithmeticOperationError);

    printf("%d + %d = %d\n", number1, number2, number1 + number2);
    printf("%d - %d = %d\n", number1, number2, number1 - number2);
    printf("%d + %d = %d\n", number1, number2, number1 * number2);
    printf("%d / %d = %d\n", number1, number2, number1 / number2);
}

void arithmeticOperationError() {
    printf("Erroneous arithmetic operation.\n");
    exit(-1);
}

gcc -Wall -o ex5 ex5.c
./ex5

Saída 1:
First number: 5
Second number: 0
5 + 0 = 5
5 - 0 = 5
5 + 0 = 0
Floating point exception (core dumped)

Saída 2:
First number: 5
Second number: 0
5 + 0 = 5
5 - 0 = 5
5 + 0 = 0
Erroneous arithmetic operation.

O programa lê dois números com scanf e imprime os resultados das
operações básicas. Se o segundo número for 0 (antes de capturar o SIGFPE)
O programa é encerrado com uma Floating point exception, por causa da divisão
por 0. Se o sinal SIGFPE for capturado o sinal écontínuamente enviado para o
processo, e a função handler é ativada várias vezes. A chamada da função exit
impede que esse problema aconteça, fechando o processo.

6) Faça um programa para monitorar e informar o 
preço de chamadas telefônicas. O programa 
deverá ser executado em background.
O início e o término de uma chamada são  
informados através dos sinais SIGUSR1 e 
SIGUSR2, respectivamente.
O custo da ligação é de 2 centavos por 
segundo, para ligações de até 1 minuto ou de 1 
centavo por segundo a partir do 2º. minuto, ou 
seja, uma ligação de 1m30s custa R$1,50.

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

void exitHandler();

int totalTime = 0;

int main(void) {
    signal(SIGUSR1, exitHandler);
    signal(SIGUSR2, exitHandler);

    while (1 < 2) {
        sleep(1);
        totalTime++;
    }

    return 0;
}

void exitHandler() {
    // If the call lasts less than a minute,
    // every second costs double the price
    if (totalTime < 60) {
        totalTime *= 2;
    }

    int minutes = totalTime / 60;
    int seconds = totalTime % 60;
    printf("Price: R$%d,%02d\n", minutes, seconds);

    exit(0);
}

gcc -Wall -o ex6 ex6.c
./ex6 &
kill -SIGUSR1 24329

Saída:
[1] 24329
Price: R$0,12
[1]+  Done                    ./ex6

O código começa atribuindo a função exitHandler como tratador
dos sinais SIGUSR1 e SIGUSR2. A função main simplesmente espera 1
segundo e atribui 1 a variável global totalTime. Quando o processo
recebe o sinal SIGUSR1 através de uma chamada da shell, a função
exitHandler é chamada, corrigindo o valor da chamada telefônica se
teve menos de 1 minuto e imprimindo o preço em reais, a partir de uma
conversão usando restos e divisão por 60.

7) Elabore três programas I/O bound que não 
terminem (loop de msgs no vídeo).
Elabore um programa que seja capaz de 
executar os 3 programas indicados anteriormente 
e que simule o compartilhamento da CPU entre os 
3 processos com escalonamento Round-Robin 
com uma fatia de tempo de 1 segundo para o 
primeiro processo e de 2 segundos para os 
demais processos. Execute os programas e relate 
o que aconteceu

io_bound1.c

#include <stdio.h>
#include <unistd.h>

int main(void) {
    while (1) {
        printf("IO 1\n");
        usleep(500000); // Sleep for 0.5 seconds
    }
    return 0;
}

io_bound2.c

#include <stdio.h>
#include <unistd.h>

int main(void) {
    while (1) {
        printf("IO 2\n");
        usleep(500000); // Sleep for 0.5 seconds
    }
    return 0;
}

io_bound3.c

#include <stdio.h>
#include <unistd.h>

int main(void) {
    while (1) {
        printf("IO 3\n");
        usleep(500000); // Sleep for 0.5 seconds
    }
    return 0;
}

ex7.c:

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

void sigcontHandler();

int main(void) {
    char *argv[] = {NULL};

    pid_t child1 = fork();
    if (child1 < 0) exit(-1);

    if (child1 == 0) {
        execv("./io1", argv);
    }
    kill(child1, SIGSTOP);

    pid_t child2 = fork();
    if (child2 < 0) exit(-1);

    if (child2 == 0) {
        execv("./io2", argv);
    }
    kill(child2, SIGSTOP);

    pid_t child3 = fork();
    if (child3 < 0) exit(-1);

    if (child3 == 0) {
        execv("./io3", argv);
    }
    kill(child3, SIGSTOP);

    int childTurn = 1;
    for (;;) {
        if (childTurn == 1) {
            kill(child1, SIGCONT);
            kill(child2, SIGSTOP);
            kill(child3, SIGSTOP);
            childTurn = 2;
            sleep(1);
        } else if (childTurn == 2) {
            kill(child1, SIGSTOP);
            kill(child2, SIGCONT);
            kill(child3, SIGSTOP);
            childTurn = 3;
            sleep(2);
        } else if (childTurn == 3) {
            kill(child1, SIGSTOP);
            kill(child2, SIGSTOP);
            kill(child3, SIGCONT);
            childTurn = 1;
            sleep(2);
        }
    }

    return 0;
}

gcc -Wall -o io1 io_bound1.c
gcc -Wall -o io2 io_bound2.c
gcc -Wall -o io3 io_bound3.c
gcc -Wall -o ex7 ex7.c
./ex7

Saída:
IO 1
IO 1
IO 2
IO 2
IO 2
IO 2
IO 3
IO 3
IO 3
IO 3
IO 1
IO 1
IO 2
IO 2
IO 2
IO 2
IO 3
IO 3
IO 3
IO 3
IO 1
IO 1
IO 2
IO 2
IO 2
IO 2
IO 3
IO 3
IO 3
IO 3
^C

Criei os programas io1 2 e 3 imprimindo quem são e esperando 0.5 segundo
para poder ver com mais clareza os processos acontecendo. O arquivo ex7.c
cria processos para cada um dos três arquivos executarem com execv e em
seguida pausa o processamento de cada um enviando o sinal SIGSTOP. Depois
disso, o processo pai começa define o filho inicial como 1 e começa um loop
que gerencia o funcionamento dos filhos. Dependendo do filho com turno ativo,
os outros dois recebem o sinal SIGSTOP e o ativo recebe SIGCONT para continuar
o processamento. Depois disso o programa dá 1 segundo de processamento se for o
primeiro filho ou 2 se for outro. No final, o resultado é que o processamento começa
com o filho io1, que imprime tem tempo de imprimir duas vezes (1 / 0.5 = 2) antes
que o pai passe o processo para o segundo, que tem tempo de imprimir 4 vezes antes
de passar para o terceiro, e assim por diante. No fim das contas, os processos io2
e io3 são executados pelo dobro do tempo em comparação com o processo io1.
